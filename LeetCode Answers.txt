2--
class Solution:
    def addTwoNumbers(self, l1:Optional[ListNode], l2:Optional[ListNode]):
        dummyHead = ListNode(0)
        curr = dummyHead
        carry = 0
        while l1 != None or l2 != None or carry != 0:
            l1Val = l1.val if l1 else 0
            l2Val = l2.val if l2 else 0
            columnSum = l1Val + l2Val + carry
            carry = columnSum // 10
            newNode = ListNode(columnSum % 10)
            curr.next = newNode
            curr = newNode
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None
        return dummyHead.next
1--
class Solution():
	def TwoSum(self, nums, target):
		n = len(nums)
		for i in range(n):
			for j in range(i + 1, n):
				if nums[i] + nums[j] == target:
					return nums[i, j]

3--
class Solution:
    def lengthOfLongestSubstring(self, s: str):
        d = {}
        res = 0
        k = 0
        for i in s:
            if i not in d:
                d[i] = 1
                res = len(d)
                k = max(k, res)
            else:
                while i in d.keys():
                    val = next(iter(d))
                    del d[val]
                d[i] = 1
        return k

4--
class Solution:
    def findMedianSortedArrays(self, nums1 = List[int], nums2 = List[int]):
        nums1 = nums1 + nums2
        nums1 = sorted(nums1)
        n = len(nums1)
        if n % 2 == 0:
            return (nums1[n//2 - 1] + nums1[n // 2]) / 2
        else:
            n = math.ceil(n / 2)
            return nums1[n-1]
5--
class Solution:
    def longestPalindrome(self, s: str) -> str:
        res = ""
        resLen = 0
        
        for i in range(len(s)):
            l ,r = i, i
            while l >= 0 and r <len(s) and s[l] == s[r]:
                if (r - l + 1) > resLen:
                    res = s[l:r+1]
                    resLen = r - l + 1
                l -= 1
                r += 1
                
            l, r = i, i + 1
            while l >= 0 and r < len(s) and s[l] == s[r]:
                if (r - l + 1) > resLen:
                    res = s[l:r+1]
                    resLen = r - l + 1
                l -= 1
                r += 1
        return res

9--
class Solution:
    def isPalindrome(self, x: int):
        if x < 0:
            return False
        number = x
        reverse = 0
        while number:
            reverse = reverse * 10 + number % 10
            number //= 10
        return x == reverse
                